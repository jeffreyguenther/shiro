// Graph
graph constrainedBox begin
	// Use Point to create a number of instances, but with different names.
	// "->" is the produces operator. It copys all of the ports and their expressions.
	// It renames the node to the name given on the right hand side of the operator.
	Point -> P1 -> P2 -> P3 -> P4
	Line -> L1 -> L2 -> L3 -> L4
	Area -> A[areaFromPoints] // Create an Area node A with the "areaFromPoints" evaluated port selected, which will give an error because the p1, p2 p3, p4 have never been assigned values. Change to "update" to have the program work properly.
	
	// Connect nodes in the graph by connecting ports via a port's expression
	P1.x(0)
	P1.y(0)
	
	P2.x( 0 )
	P2.y( 10)
		
	P3.x( 2.5 * P2.y[0])
	P3.y( P2.y[0])
	
	P4.x(2.5 * P2.y[0])
	P4.y(P1.y[0])
	
	L1.p1(P1.point[0])
	L1.p2(P2.point[0])
	
	L2.p1(P1.point[0])
	L2.p2(P4.point[0])
	
	L3.p1(P4.point[0])
	L3.p2(P3.point[0])
	
	L4.p1(P2.point[0])
	L4.p2(P3.point[0])
	
	A.length1(L1.length[0])
	A.length2(L2.length[0])
		
	// Direct use of the Perimeter node. As long as the name is in scope an
	// instance will be created.
	Perimeter.length1(L1.length[0])
	Perimeter.length2(L2.length[0])
end