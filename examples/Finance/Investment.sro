node SimpleInterest begin
   input rate Double
   input principal Double
   input time Double
   output newValue Double(principal + (principal * rate * time ))
end

node CompoundInterest begin
  input principal Double
  input compoundFreq Double
  input time Double
  input rate Double

  interestFactor Power(1 +  (rate/compoundFreq), compoundFreq * time)

  output newValue Double(principal * interestFactor)
end

node InterestRate begin
  input rate Double
  input frequency Double
end

node Investment begin
   input principal Double
   input rate InterestRate
   input time Double
   
   option compound CompoundInterest(principal, rate.frequency, time, rate.rate)
   option simple SimpleInterest(rate: rate.rate, principal: principal, time: time)

   output newValue Double(active.newValue)
end

node InvestmentLengths[threeYear] begin
  option output threeYear Double(3.0)
  option output fiveYear Double(5.0)
  option output twoYear Double(2.0)
end

node InterestRates begin
  option output productA InterestRate(0.12, 1.0)
  option output productB InterestRate(0.05, 12.0)
  option output productC InterestRate(0.07, 1.0)
end

graph earnMoney begin
  times InvestmentLengths
  rates InterestRates
  retirement Investment

  retirement.rate.rate(rates.active.rate)
  retirement.rate.frequency(rates.active.frequency)
  retirement.principal(10000.0)
  retirement.time(times.active)

  balance Double(retirement.newValue)
end

state productA begin
  graph earnMoney
  retirement[compound]
  times[threeYear]
  rates[productA]
end

state productB begin
  graph earnMoney
  retirement[compound]
  times[fiveYear]
  rates[productB]
end

state productC begin
  graph earnMoney
  retirement[simple]
  times[twoYear]
  rates[productC]
end
