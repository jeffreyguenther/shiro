node SimpleInterest begin
	input rate Double
	input principal Double
	input time Double
	output newValue Double( principal * rate * time )
end

node CompundedMonthly begin
	input rate Double
	input principal Double
	input time Double
	output newValue Double( principal * (rate / time) * time )
end

node Investment[simple] begin
	input principal Double
	input rate Double
	input time Double
	
	option SimpleInterest -> simple(rate: rate, principal: principal, time: time)
        option CompundedMonthly -> monthly(rate: rate, principal: principal, time: time)

	output newValue Double(active.newValue)
end

node InvestmentLength[threeYear] begin
	option output threeYear Double(3.0)
	option output fiveYear Double(5.0)
end

node InterestRate begin
	option output productA Double(0.12)
	option output productB Double(0.05)
end

graph earnMoney begin
	Investment -> retirement
	InvestmentLength -> time
	InterestRate -> rate

	retirement.rate(rate.active)
	retirement.principal(10000.0)
	retirement.time(time.active)
end

state productA begin
	Graph earnMoney
	retirement[simple]
	time[threeYear]
	rate[productA]
end

state productB begin
	Graph earnMoney
	retirement[monthly]
	time[threeYear]
	rate[productB]
end

