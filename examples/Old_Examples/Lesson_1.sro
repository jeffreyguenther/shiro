/*
* A scaling box. Here is an example of how to build a simple geometric 	
* parametric graph.
* 
* Author: Jeffrey Guenther
* August 10, 2012
*
* Lesson_1.sro
*
* Note: This is the syntax for a multi-line comment.
*/

// w/o "use" statement Shiro will attempt to match multi-functions from the standard list of multi-functions.

// Define your nodes
node Point begin
	port x Value
	port y Value
	eval update Point ( x[0], y[0] )// Notice the node's name and the evaluated port's multifunction have the same name. Names of nodes and names of multi-functions can be the same because they are completely different aspects of Shiro. One indicates the type of the port. The other indicates the name of the node. Multi-functions have their own package structure. 
	port point Value ( update[0] )  // Shiro is case-sensitive, so "point" and "Point" are different names.
end

// Define a line node
node Line begin
	port p1 Value
	port p2 Value
	eval update Line ( p1[0], p2[0] )
	port length Value ( update["length"] )
	port line Value ( update[0] )
end

// Area node with two evaluated ports
node Area[update] begin
	port p1 Value
	port p2 Value
	port p3 Value
	port p4 Value
	eval areaFromPoints areaPoints(p1[0], p2[0], p3[0], p[4])

	port length1 Value
	port length2 Value
	eval update Multiply(length1[0], length2[0])
	
	// area depends on the two eval ports.
	// The active eval port will determine the value of area.
	port area Value (update["value"] | areaFromPoints["value"])
end

node Perimeter begin
	port length1 Value
	port length2 Value
	eval update Sum(2 * length1[0], 2 * length2[0])
	port perimeter Value(update[0])
end

// Graph
graph constrainedBox begin
	// Use Point to create a number of instances, but with different names.
	// "->" is the produces operator. It copys all of the ports and their expressions.
	// It renames the node to the name given on the right hand side of the operator.
	Point -> P1 -> P2 -> P3 -> P4
	Line -> L1 -> L2 -> L3 -> L4
	Area -> A[areaFromPoints] // Create an Area node A with the "areaFromPoints" evaluated port selected, which will give an error because the p1, p2 p3, p4 have never been assigned values. Change to "update" to have the program work properly.
	
	// Connect nodes in the graph by connecting ports via a port's expression
	P1.x(0)
	P1.y(0)
	
	P2.x( 0 )
	P2.y( 10)
		
	P3.x( 2.5 * P2.y[0])
	P3.y( P2.y[0])
	
	P4.x(2.5 * P2.y[0])
	P4.y(P1.y[0])
	
	L1.p1(P1.point[0])
	L1.p2(P2.point[0])
	
	L2.p1(P1.point[0])
	L2.p2(P4.point[0])
	
	L3.p1(P4.point[0])
	L3.p2(P3.point[0])
	
	L4.p1(P2.point[0])
	L4.p2(P3.point[0])
	
	A.length1(L1.length[0])
	A.length2(L2.length[0])
		
	// Direct use of the Perimeter node. As long as the name is in scope an
	// instance will be created.
	Perimeter.length1(L1.length[0])
	Perimeter.length2(L2.length[0])
end

// declaring a state
state Lesson1 begin
	Graph constrainedBox		// indicate which graph to use in the state
end