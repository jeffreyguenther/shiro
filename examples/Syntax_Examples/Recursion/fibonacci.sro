/*
Demonstrates a recursion in Shiro using a classic example - the sum of the nth fibonacci numbers

An imperative approach, in say javascript:
	function fib(n){
		if n  == 0{
			return 0
		}else if n == 1{
			return 1
		}else{
			return fib(n - 2) + fib(n-1)
		}
	}
*/

node Fibonacci begin
	input n Integer
	
	// ConditionalReturn
	/*
		0: whether to return value or not
		1: value to return if true
		2: value to return if false
	*/
	zeroFilter ConditionalReturn(n == 0, 0, 0)
	oneFilter ConditionalReturn(n == 1, 1, 0)
	// pass a node reference, in this case a prototype, into the node for conditional execution
	// n is passed as the first arg to the prototype
	nMinus1 ConditionalReturnNode(n > 1, n - 1, Fibonacci, 0)
	nMinus2 ConditionalReturnNode(n > 1, n - 2, Fibonacci, 0)

	// Sums the arguments passed
	values List.Ldf.Fun(zeroFilter, oneFilter, nMinus1, nMinus2)
    output sum Sum(values)
end

Fibonacci -> fib(n: 5)
