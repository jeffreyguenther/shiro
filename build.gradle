/**
 * This build script is based on https://github.com/ae6rt/gradle-antlr4-template
 * 
 * */
description = "shiro - a data flow language for alternatives"
apply plugin: 'java'
apply plugin: 'application'
apply from: 'gradle/javafx.plugin'

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
    }
}

ext.versions = [
    junit: "4.11"
]

ext.antlr = [
    grammarpackage: "org.shirolang.interpreter",
    antlrSource: 'src/main/java/org/shirolang',
    destinationDir: "src/generated/java"
]

sourceSets{
    generated
    main{
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
    test{
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
}
project.run.classpath += sourceSets.generated.output

repositories {
    mavenCentral()
}

configurations {
    antlr4
}

sourceSets{
    main{
        java{
            srcDirs 'src/main/java', 'src/generated/java'
        }
    }
}

dependencies {
    compile group: "org.antlr", name: "antlr4-runtime", version: "4.5"
    generatedCompile group: "org.antlr", name: "antlr4-runtime", version: "4.5"
    compile 'org.antlr:ST4:4.0.8'
    compile group: "org.antlr", name: "antlr4", version: "4.5"

    compile group: 'org.fxmisc.richtext', name: 'richtextfx', version: '0.6.3'
    compile 'com.google.guava:guava:12.0'
    compile 'net.sf.opencsv:opencsv:2.3'
    compile 'net.sf.jung:jung-api:2.0.1'
    compile 'net.sf.jung:jung-graph-impl:2.0.1'
    compile 'net.sf.jung:jung-algorithms:2.0.1'
    compile 'net.sf.jung:jung-io:2.0.1'
    compile 'net.sf.jung:jung-visualization:2.0.1'
    
    
    testCompile group: "junit", name: "junit", version: versions.junit
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    systemProperties = System.getProperties()
    testLogging.showStandardStreams = true
}

task antlrOutputDir << {
    mkdir(antlr.destinationDir)
}

task generateGrammarSource(dependsOn: antlrOutputDir, type: JavaExec) {
    description = 'Generates Java sources from ANTLR4 grammars.'

    inputs.dir file(antlr.antlrSource)
    outputs.dir file(antlr.destinationDir)
    
    def grammars = fileTree(antlr.antlrSource).include('**/*.g4')

    main = 'org.antlr.v4.Tool'
    classpath = sourceSets.main.compileClasspath
    def pkg = antlr.grammarpackage.replaceAll("\\.", "/")
    args = ["-o", "${antlr.destinationDir}/${pkg}"/*, "-atn"*/, "-listener", "-package", antlr.grammarpackage, grammars.files].flatten()
}

compileJava {
    dependsOn generateGrammarSource
    classpath += sourceSets.generated.output
}

clean {
    delete antlr.destinationDir
}

jar{
    manifest {
        attributes 'Implementation-Title': 'shiro', 
                   'Implementation-Version': "0.1.0",
                   'Main-Class': "org.shirolang.playground.ShiroPlayground"
    }
}

task fatJar(type: Jar, dependsOn: classes) {
    appendix = 'fat'
    from sourceSets.main.output
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}
assemble.dependsOn fatJar

mainClassName = 'org.shirolang.playground.ShiroPlayground'

javafx{
    appID 'Shiro Playground'
    appName 'Shiro Playground'
    mainClass mainClassName
}